# frozen_string_literal: true

# <%= full_model_name.pluralize %>Controller
# 
# Handles HTTP requests for <%= model_name.humanize.pluralize.downcase %> management.
# Uses Inertia.js for seamless SPA-like experience with server-side routing.
<% unless skip_academy? -%>
# 
# This controller is academy-scoped and requires academy context
# for all operations to ensure proper multi-tenancy.
<% else -%>
# 
# This controller operates without academy scoping as it's a foundation model.
<% end -%>
# 
<% if module_name -%>
module <%= module_name %>
  class <%= model_name.camelize.pluralize %>Controller < ApplicationController
<% else -%>
module <%= slice_name.camelize %>
  class <%= model_name.camelize.pluralize %>Controller < ApplicationController
<% end -%>
    # Callbacks
    before_action :set_<%= model_name.underscore %>, only: [ :show, :edit, :update, :destroy ]
<% unless skip_academy? -%>
    before_action :set_academy
<% end -%>

    # GET /<%= model_name.underscore.pluralize %>
    # Display paginated list of <%= model_name.humanize.pluralize.downcase %>
    def index
<% if skip_academy? -%>
      service = <%= full_model_name %>Service.new
      result = service.list(page: params[:page] || 1)

      if result.success?
        render inertia: "<%= model_name.camelize %>/Index", props: {
          <%= model_name.underscore.pluralize %>: <%= full_model_name %>Serializer.new(result.data).as_json
        }
      else
        redirect_to root_path, alert: result.errors.join(", ")
      end
<% else -%>
      service = <%= full_model_name %>Service.new(academy: @academy)
      result = service.list(page: params[:page] || 1)

      if result.success?
        render inertia: "<%= model_name.camelize %>/Index", props: {
          <%= model_name.underscore.pluralize %>: <%= full_model_name %>Serializer.new(result.data).as_json,
          academy: { slug: @academy.slug, name: @academy.name }
        }
      else
        redirect_to root_path, alert: result.errors.join(", ")
      end
<% end -%>
    end

    # GET /<%= model_name.underscore.pluralize %>/:id
    # Display a specific <%= model_name.humanize.downcase %>
    def show
      render inertia: "<%= model_name.camelize %>/Show", props: {
        <%= model_name.underscore %>: <%= full_model_name %>Serializer.new(@<%= model_name.underscore %>).as_json,
        academy: { slug: @academy.slug, name: @academy.name }
      }
    end

    # GET /<%= model_name.underscore.pluralize %>/new
    # Display form for creating a new <%= model_name.humanize.downcase %>
    def new
      @<%= model_name.underscore %> = <%= full_model_name %>.new

      render inertia: "<%= model_name.camelize %>/New", props: {
        <%= model_name.underscore %>: <%= full_model_name %>Serializer.new(@<%= model_name.underscore %>).as_json,
        academy: { slug: @academy.slug, name: @academy.name }
      }
    end

    # POST /<%= model_name.underscore.pluralize %>
    # Create a new <%= model_name.humanize.downcase %> with submitted form data
    def create
      service = <%= full_model_name %>Service.new(academy: @academy, params: params)
      result = service.create

      if result.success?
        redirect_to <%= model_name.underscore %>_path(result.data), notice: "<%= model_name.humanize %> was successfully created."
      else
        redirect_to new_<%= model_name.underscore %>_path, inertia: { errors: result.errors }
      end
    end

    # GET /<%= model_name.underscore.pluralize %>/:id/edit
    # Display form for editing an existing <%= model_name.humanize.downcase %>
    def edit
      render inertia: "<%= model_name.camelize %>/Edit", props: {
        <%= model_name.underscore %>: <%= full_model_name %>Serializer.new(@<%= model_name.underscore %>).as_json,
        academy: { slug: @academy.slug, name: @academy.name }
      }
    end

    # PATCH/PUT /<%= model_name.underscore.pluralize %>/:id
    # Update an existing <%= model_name.humanize.downcase %> with submitted form data
    def update
      service = <%= full_model_name %>Service.new(academy: @academy, params: params)
      result = service.update(@<%= model_name.underscore %>.id)

      if result.success?
        redirect_to @<%= model_name.underscore %>, notice: "<%= model_name.humanize %> was successfully updated."
      else
        redirect_to edit_<%= model_name.underscore %>_path(@<%= model_name.underscore %>), inertia: { errors: result.errors }
      end
    end

    # DELETE /<%= model_name.underscore.pluralize %>/:id
    # Delete an existing <%= model_name.humanize.downcase %>
    def destroy
      service = <%= full_model_name %>Service.new(academy: @academy)
      result = service.destroy(@<%= model_name.underscore %>.id)

      if result.success?
        redirect_to <%= model_name.underscore.pluralize %>_path, notice: "<%= model_name.humanize %> was successfully deleted."
      else
        redirect_to @<%= model_name.underscore %>, alert: result.errors.join(", ")
      end
    end

    private

    # Load the <%= model_name.humanize.downcase %> for actions that need it
    def set_<%= model_name.underscore %>
      service = <%= full_model_name %>Service.new(academy: @academy)
      result = service.find(params[:id])

      if result.success?
        @<%= model_name.underscore %> = result.data
      else
        redirect_to <%= model_name.underscore.pluralize %>_path, alert: result.errors.join(", ")
      end
    end

    # Load the academy context for multi-tenant operations
    def set_academy
      @academy = current_user.academies.find_by!(slug: params[:academy_slug]) if params[:academy_slug]
      @academy = current_user.default_academy if @academy.nil?
    end
  end
end
