# frozen_string_literal: true

# <%= full_model_name %>Service
# 
# Business logic layer for <%= model_name.humanize.pluralize.downcase %> operations.
# Handles CRUD operations with proper error handling and result objects.
<% unless skip_academy? -%>
# 
# This service is academy-scoped and requires an academy parameter
# for all operations to ensure proper multi-tenancy.
<% else -%>
# 
# This service operates without academy scoping as it's a foundation model.
<% end -%>
# 
<% if module_name -%>
module <%= module_name %>
  class <%= model_name.camelize %>Service < BaseService
<% else -%>
module <%= slice_name.camelize %>
  class <%= model_name.camelize %>Service < BaseService
<% end -%>
<% if skip_academy? -%>
    # Instance variables for foundation model service
    attr_reader :params, :<%= model_name.underscore %>

    # Initialize service without academy scoping
    def initialize(params: {})
      @params = params
    end
<% else -%>
    # Instance variables for academy-scoped service
    attr_reader :academy, :params, :<%= model_name.underscore %>

    # Initialize service with academy for multi-tenancy
    # @param academy [Academy] The academy scope for operations
    # @param params [Hash] Parameters for the operation
    def initialize(academy:, params: {})
      @academy = academy
      @params = params
    end
<% end -%>

    # Create a new <%= model_name.humanize.downcase %>
    # @return [ServiceResult] Success with created record or error with validation messages
    def create
<% if skip_academy? -%>
      @<%= model_name.underscore %> = <%= full_model_name %>.new(permitted_params)

      if @<%= model_name.underscore %>.save
        success_result(data: @<%= model_name.underscore %>)
      else
        error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
      end
<% else -%>
      ActsAsTenant.with_tenant(academy) do
        @<%= model_name.underscore %> = <%= full_model_name %>.new(permitted_params)

        if @<%= model_name.underscore %>.save
          success_result(data: @<%= model_name.underscore %>)
        else
          error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
        end
      end
<% end -%>
    end

    # Update an existing <%= model_name.humanize.downcase %>
    # @param <%= model_name.underscore %>_id [String] The ID of the <%= model_name.humanize.downcase %> to update
    # @return [ServiceResult] Success with updated record or error with validation messages
    def update(<%= model_name.underscore %>_id)
<% if skip_academy? -%>
      @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)

      if @<%= model_name.underscore %>.update(permitted_params)
        success_result(data: @<%= model_name.underscore %>)
      else
        error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
      end
<% else -%>
      ActsAsTenant.with_tenant(academy) do
        @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)

        if @<%= model_name.underscore %>.update(permitted_params)
          success_result(data: @<%= model_name.underscore %>)
        else
          error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
        end
      end
<% end -%>
    rescue ActiveRecord::RecordNotFound
      error_result(errors: [ "<%= model_name.humanize %> not found" ])
    end

    # Find a specific <%= model_name.humanize.downcase %> by ID
    # @param <%= model_name.underscore %>_id [String] The ID of the <%= model_name.humanize.downcase %> to find
    # @return [ServiceResult] Success with found record or error if not found
    def find(<%= model_name.underscore %>_id)
<% if skip_academy? -%>
      @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)
      success_result(data: @<%= model_name.underscore %>)
<% else -%>
      ActsAsTenant.with_tenant(academy) do
        @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)
        success_result(data: @<%= model_name.underscore %>)
      end
<% end -%>
    rescue ActiveRecord::RecordNotFound
      error_result(errors: [ "<%= model_name.humanize %> not found" ])
    end

    # List <%= model_name.humanize.pluralize.downcase %> with pagination
    # @param page [Integer] The page number (default: 1)
    # @param per_page [Integer] Records per page (default: 20)
    # @return [ServiceResult] Success with paginated records
    def list(page: 1, per_page: 20)
<% if skip_academy? -%>
      @<%= model_name.underscore.pluralize %> = <%= full_model_name %>.page(page).per(per_page)
      success_result(data: @<%= model_name.underscore.pluralize %>)
<% else -%>
      ActsAsTenant.with_tenant(academy) do
        @<%= model_name.underscore.pluralize %> = <%= full_model_name %>.page(page).per(per_page)
        success_result(data: @<%= model_name.underscore.pluralize %>)
      end
<% end -%>
    end

    # Delete a <%= model_name.humanize.downcase %>
    # @param <%= model_name.underscore %>_id [String] The ID of the <%= model_name.humanize.downcase %> to delete
    # @return [ServiceResult] Success with deleted record or error with validation messages
    def destroy(<%= model_name.underscore %>_id)
<% if skip_academy? -%>
      @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)

      if @<%= model_name.underscore %>.destroy
        success_result(data: @<%= model_name.underscore %>)
      else
        error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
      end
<% else -%>
      ActsAsTenant.with_tenant(academy) do
        @<%= model_name.underscore %> = <%= full_model_name %>.find(<%= model_name.underscore %>_id)

        if @<%= model_name.underscore %>.destroy
          success_result(data: @<%= model_name.underscore %>)
        else
          error_result(errors: @<%= model_name.underscore %>.errors.full_messages)
        end
      end
<% end -%>
    rescue ActiveRecord::RecordNotFound
      error_result(errors: [ "<%= model_name.humanize %> not found" ])
    end

    private

    # Strong parameters for <%= model_name.humanize.downcase %> attributes
    # @return [ActionController::Parameters] Permitted parameters
    def permitted_params
      params.require(:<%= model_name.underscore %>).permit(
<% attributes.each_with_index do |attr, index| -%>
        :<%= attr[:name] %><%= index < attributes.length - 1 ? ',' : '' %>
<% end -%>
      )
    end
  end
end
