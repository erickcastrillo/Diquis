/**
 * <%= model_name.camelize %> Show Component Tests
 * 
 * Tests for the <%= model_name.humanize.downcase %> detail view component including:
 * - Data display and formatting
 * - Action buttons and navigation
 * - Date formatting and display
 * - Status indicators and accessibility
 */

import { describe, it, expect, vi } from 'vitest'
import { render, screen } from '@testing-library/react'
import Show from '../Show'
import { <%= model_name.camelize %>Type } from '../types'

// Mock Inertia.js
vi.mock('@inertiajs/react', async () => {
  const actual = await vi.importActual('@inertiajs/react')
  return {
    ...actual,
    Head: ({ children, title }: { children?: React.ReactNode; title: string }) => (
      <head data-testid="head">
        <title>{title}</title>
        {children}
      </head>
    ),
    Link: ({ href, children, className, ...props }: any) => (
      <a href={href} className={className} {...props}>
        {children}
      </a>
    )
  }
})

// Test data
const mockAcademy = {
  slug: 'test-academy',
  name: 'Test Academy'
}

const mock<%= model_name.camelize %>: <%= model_name.camelize %>Type = {
  id: 'test-<%= model_name.underscore %>-id',
  slug: 'test-<%= model_name.underscore %>-slug',
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
  name: 'Test <%= model_name.humanize %>',
<% elsif attr[:type] == 'boolean' -%>
  <%= attr[:name] %>: true,
<% elsif attr[:type] == 'text' -%>
  <%= attr[:name] %>: 'This is a comprehensive test <%= attr[:name].humanize.downcase %> that provides detailed information about the <%= model_name.humanize.downcase %>.',
<% elsif attr[:type] == 'string' -%>
  <%= attr[:name] %>: 'Test <%= attr[:name].humanize.downcase %> value',
<% elsif attr[:type] == 'integer' -%>
  <%= attr[:name] %>: 42,
<% else -%>
  <%= attr[:name] %>: 'test_<%= attr[:name] %>_value',
<% end -%>
<% end -%>
  created_at: '2024-01-15T10:30:00Z',
  updated_at: '2024-01-20T14:45:00Z'
}

describe('<%= model_name.camelize %> Show', () => {
  // Test basic rendering and data display
  describe('content rendering', () => {
    it('renders the page with correct title', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByTestId('head')).toBeInTheDocument()
      expect(screen.getByRole('heading', { name: 'Test <%= model_name.humanize %>' })).toBeInTheDocument()
    })

    it('displays the <%= model_name.humanize.downcase %> name prominently', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const heading = screen.getByRole('heading', { level: 1 })
      expect(heading).toHaveTextContent('Test <%= model_name.humanize %>')
      expect(heading).toHaveClass('text-2xl', 'font-bold', 'text-gray-900')
    })

<% if attributes.any? { |attr| attr[:name] == 'is_active' } -%>
    it('displays active status badge correctly', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const statusBadge = screen.getByText('Active')
      expect(statusBadge).toBeInTheDocument()
      expect(statusBadge).toHaveClass('bg-green-100', 'text-green-800')
    })

    it('displays inactive status badge correctly', () => {
      const inactive<%= model_name.camelize %> = { 
        ...mock<%= model_name.camelize %>, 
        is_active: false 
      }
      
      render(<Show <%= model_name.underscore %>={inactive<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const statusBadge = screen.getByText('Inactive')
      expect(statusBadge).toBeInTheDocument()
      expect(statusBadge).toHaveClass('bg-red-100', 'text-red-800')
    })

<% end -%>
    it('displays all attribute details', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
<% attributes.each do |attr| -%>
<% next if attr[:name] == 'name' -%>
<% if attr[:type] == 'boolean' -%>
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('Yes')).toBeInTheDocument()
<% elsif attr[:type] == 'text' -%>
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText(/This is a comprehensive test <%= attr[:name].humanize.downcase %>/)).toBeInTheDocument()
<% elsif attr[:type] == 'string' -%>
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('Test <%= attr[:name].humanize.downcase %> value')).toBeInTheDocument()
<% elsif attr[:type] == 'integer' -%>
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('42')).toBeInTheDocument()
<% else -%>
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('test_<%= attr[:name] %>_value')).toBeInTheDocument()
<% end -%>
<% end -%>
    })

    it('displays formatted creation date', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Created')).toBeInTheDocument()
      expect(screen.getByText('1/15/2024')).toBeInTheDocument()
    })

    it('displays formatted last updated date', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Last Updated')).toBeInTheDocument()
      expect(screen.getByText('1/20/2024')).toBeInTheDocument()
    })
  })

  // Test action buttons and navigation
  describe('action buttons', () => {
    it('displays edit button with correct link', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const editButton = screen.getByText('Edit')
      expect(editButton).toBeInTheDocument()
      expect(editButton).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/test-<%= model_name.underscore %>-id/edit')
      expect(editButton).toHaveClass('bg-blue-600', 'hover:bg-blue-700', 'text-white')
    })

    it('displays back to list button with correct link', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const backButton = screen.getByText('Back to List')
      expect(backButton).toBeInTheDocument()
      expect(backButton).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>')
      expect(backButton).toHaveClass('bg-gray-200', 'hover:bg-gray-300', 'text-gray-800')
    })

    it('positions action buttons correctly', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const actionsContainer = screen.getByText('Edit').closest('.flex')
      expect(actionsContainer).toHaveClass('space-x-3')
    })
  })

  // Test data handling edge cases
  describe('data handling', () => {
<% attributes.each do |attr| -%>
<% next if attr[:name] == 'name' -%>
<% if attr[:type] == 'text' || attr[:type] == 'string' -%>
    it('handles empty <%= attr[:name] %> gracefully', () => {
      const <%= model_name.underscore %>WithEmpty<%= attr[:name].camelize %> = { 
        ...mock<%= model_name.camelize %>, 
        <%= attr[:name] %>: '' 
      }
      
      render(<Show <%= model_name.underscore %>={<%= model_name.underscore %>WithEmpty<%= attr[:name].camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('Not provided')).toBeInTheDocument()
    })

    it('handles null <%= attr[:name] %> gracefully', () => {
      const <%= model_name.underscore %>WithNull<%= attr[:name].camelize %> = { 
        ...mock<%= model_name.camelize %>, 
        <%= attr[:name] %>: null as any
      }
      
      render(<Show <%= model_name.underscore %>={<%= model_name.underscore %>WithNull<%= attr[:name].camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('<%= attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('Not provided')).toBeInTheDocument()
    })

<% end -%>
<% end -%>
<% if attributes.any? { |attr| attr[:type] == 'boolean' } -%>
<% boolean_attr = attributes.find { |attr| attr[:type] == 'boolean' } -%>
    it('handles boolean values correctly', () => {
      const <%= model_name.underscore %>WithFalse<%= boolean_attr[:name].camelize %> = { 
        ...mock<%= model_name.camelize %>, 
        <%= boolean_attr[:name] %>: false 
      }
      
      render(<Show <%= model_name.underscore %>={<%= model_name.underscore %>WithFalse<%= boolean_attr[:name].camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('<%= boolean_attr[:name].humanize %>')).toBeInTheDocument()
      expect(screen.getByText('No')).toBeInTheDocument()
    })

<% end -%>
  })

  // Test layout and responsive behavior
  describe('layout and styling', () => {
    it('applies correct container classes', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const container = screen.getByRole('main').firstElementChild
      expect(container).toHaveClass('bg-white', 'shadow', 'rounded-lg')
    })

    it('applies responsive grid layout', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const gridContainer = screen.getByText('Details').closest('.grid')
      expect(gridContainer).toHaveClass('grid-cols-1', 'md:grid-cols-2', 'gap-6')
    })

    it('properly spaces detail items', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const detailsList = screen.getByText('Details').nextElementSibling
      expect(detailsList).toHaveClass('space-y-3')
    })
  })

  // Test accessibility
  describe('accessibility', () => {
    it('uses proper heading hierarchy', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const mainHeading = screen.getByRole('heading', { level: 1 })
      const sectionHeading = screen.getByRole('heading', { level: 3 })
      
      expect(mainHeading).toHaveTextContent('Test <%= model_name.humanize %>')
      expect(sectionHeading).toHaveTextContent('Details')
    })

    it('uses semantic HTML for definition lists', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const definitionList = screen.getByRole('main').querySelector('dl')
      expect(definitionList).toBeInTheDocument()
      
      const terms = screen.getByRole('main').querySelectorAll('dt')
      const definitions = screen.getByRole('main').querySelectorAll('dd')
      
      expect(terms.length).toBeGreaterThan(0)
      expect(definitions.length).toEqual(terms.length)
    })

    it('provides meaningful button text', () => {
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Edit')).toBeInTheDocument()
      expect(screen.getByText('Back to List')).toBeInTheDocument()
    })

    it('maintains proper color contrast for status badges', () => {
<% if attributes.any? { |attr| attr[:name] == 'is_active' } -%>
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={mockAcademy} />)
      
      const statusBadge = screen.getByText('Active')
      expect(statusBadge).toHaveClass('bg-green-100', 'text-green-800')
<% else -%>
      // No status badges in this model
      expect(true).toBe(true)
<% end -%>
    })
  })

  // Test edge cases and error handling
  describe('edge cases', () => {
    it('handles missing academy data gracefully', () => {
      const emptyAcademy = { slug: '', name: '' }
      
      render(<Show <%= model_name.underscore %>={mock<%= model_name.camelize %>} academy={emptyAcademy} />)
      
      expect(screen.getByRole('heading', { name: 'Test <%= model_name.humanize %>' })).toBeInTheDocument()
    })

    it('handles very long content appropriately', () => {
      const longContent<%= model_name.camelize %> = {
        ...mock<%= model_name.camelize %>,
        name: 'This is an extremely long <%= model_name.humanize.downcase %> name that should be handled properly without breaking the layout or causing any issues with the display',
<% if attributes.any? { |attr| attr[:type] == 'text' } -%>
<% text_attr = attributes.find { |attr| attr[:type] == 'text' } -%>
        <%= text_attr[:name] %>: 'This is an extremely long <%= text_attr[:name].humanize.downcase %> that goes on and on and on with lots of text that should be handled properly by the component without breaking the layout or causing any overflow issues in the user interface.'
<% end -%>
      }
      
      render(<Show <%= model_name.underscore %>={longContent<%= model_name.camelize %>} academy={mockAcademy} />)
      
      expect(screen.getByText(/This is an extremely long <%= model_name.humanize.downcase %> name/)).toBeInTheDocument()
    })

    it('handles date parsing errors gracefully', () => {
      const invalidDate<%= model_name.camelize %> = {
        ...mock<%= model_name.camelize %>,
        created_at: 'invalid-date',
        updated_at: 'also-invalid'
      }
      
      // This should not throw an error
      expect(() => {
        render(<Show <%= model_name.underscore %>={invalidDate<%= model_name.camelize %>} academy={mockAcademy} />)
      }).not.toThrow()
    })
  })
})