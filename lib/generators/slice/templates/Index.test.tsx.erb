/**
 * <%= model_name.camelize %> Index Component Tests
 * 
 * Tests for the <%= model_name.humanize.pluralize.downcase %> list view component including:
 * - Rendering with data
 * - Empty state handling
 * - Navigation and interactions
 * - Responsive behavior
 */

import { describe, it, expect, vi } from 'vitest'
import { render, screen, fireEvent } from '@testing-library/react'
import { router } from '@inertiajs/react'
import Index from '../Index'
import { <%= model_name.camelize %>Type } from '../types'

// Mock Inertia.js
vi.mock('@inertiajs/react', async () => {
  const actual = await vi.importActual('@inertiajs/react')
  return {
    ...actual,
    Head: ({ children, title }: { children?: React.ReactNode; title: string }) => (
      <head data-testid="head">
        <title>{title}</title>
        {children}
      </head>
    ),
    Link: ({ href, children, className, ...props }: any) => (
      <a href={href} className={className} {...props}>
        {children}
      </a>
    ),
    router: {
      visit: vi.fn(),
      get: vi.fn(),
      post: vi.fn(),
      put: vi.fn(),
      patch: vi.fn(),
      delete: vi.fn(),
    }
  }
})

// Test data
const mockAcademy = {
  slug: 'test-academy',
  name: 'Test Academy'
}

const mock<%= model_name.camelize.pluralize %>: <%= model_name.camelize %>Type[] = [
  {
    id: '1',
    slug: 'test-<%= model_name.underscore %>-1',
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
    name: 'Test <%= model_name.humanize %> 1',
<% elsif attr[:type] == 'boolean' -%>
    <%= attr[:name] %>: true,
<% elsif attr[:type] == 'text' -%>
    <%= attr[:name] %>: 'Test <%= attr[:name].humanize.downcase %> description for item 1',
<% elsif attr[:type] == 'string' -%>
    <%= attr[:name] %>: 'Test <%= attr[:name].humanize.downcase %> 1',
<% elsif attr[:type] == 'integer' -%>
    <%= attr[:name] %>: 100,
<% else -%>
    <%= attr[:name] %>: 'test_value_1',
<% end -%>
<% end -%>
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-01T00:00:00Z'
  },
  {
    id: '2',
    slug: 'test-<%= model_name.underscore %>-2',
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
    name: 'Test <%= model_name.humanize %> 2',
<% elsif attr[:type] == 'boolean' -%>
    <%= attr[:name] %>: false,
<% elsif attr[:type] == 'text' -%>
    <%= attr[:name] %>: 'Test <%= attr[:name].humanize.downcase %> description for item 2',
<% elsif attr[:type] == 'string' -%>
    <%= attr[:name] %>: 'Test <%= attr[:name].humanize.downcase %> 2',
<% elsif attr[:type] == 'integer' -%>
    <%= attr[:name] %>: 200,
<% else -%>
    <%= attr[:name] %>: 'test_value_2',
<% end -%>
<% end -%>
    created_at: '2024-01-02T00:00:00Z',
    updated_at: '2024-01-02T00:00:00Z'
  }
]

describe('<%= model_name.camelize %> Index', () => {
  // Test basic rendering with data
  describe('with <%= model_name.humanize.pluralize.downcase %> data', () => {
    it('renders the page title', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByTestId('head')).toBeInTheDocument()
      expect(screen.getByRole('heading', { name: '<%= model_name.humanize.pluralize %>' })).toBeInTheDocument()
    })

    it('displays all <%= model_name.humanize.pluralize.downcase %>', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Test <%= model_name.humanize %> 1')).toBeInTheDocument()
      expect(screen.getByText('Test <%= model_name.humanize %> 2')).toBeInTheDocument()
    })

<% if attributes.any? { |attr| attr[:name] == 'description' } -%>
    it('displays <%= model_name.humanize.downcase %> descriptions', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Test description description for item 1')).toBeInTheDocument()
      expect(screen.getByText('Test description description for item 2')).toBeInTheDocument()
    })

<% end -%>
<% if attributes.any? { |attr| attr[:name] == 'is_active' } -%>
    it('displays status badges correctly', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Active')).toBeInTheDocument()
      expect(screen.getByText('Inactive')).toBeInTheDocument()
    })

<% end -%>
    it('shows action buttons for each <%= model_name.humanize.downcase %>', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const viewLinks = screen.getAllByText('View')
      const editLinks = screen.getAllByText('Edit')
      
      expect(viewLinks).toHaveLength(2)
      expect(editLinks).toHaveLength(2)
    })

    it('has correct links for viewing <%= model_name.humanize.pluralize.downcase %>', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const viewLinks = screen.getAllByText('View')
      expect(viewLinks[0]).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/1')
      expect(viewLinks[1]).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/2')
    })

    it('has correct links for editing <%= model_name.humanize.pluralize.downcase %>', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const editLinks = screen.getAllByText('Edit')
      expect(editLinks[0]).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/1/edit')
      expect(editLinks[1]).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/2/edit')
    })

    it('displays create new <%= model_name.humanize.downcase %> button', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const createButton = screen.getByText('New <%= model_name.humanize %>')
      expect(createButton).toBeInTheDocument()
      expect(createButton).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/new')
    })
  })

  // Test empty state
  describe('with no <%= model_name.humanize.pluralize.downcase %>', () => {
    it('displays empty state message', () => {
      render(<Index <%= model_name.underscore.pluralize %>={[]} academy={mockAcademy} />)
      
      expect(screen.getByText('No <%= model_name.underscore.pluralize %> found.')).toBeInTheDocument()
    })

    it('shows create first <%= model_name.humanize.downcase %> button in empty state', () => {
      render(<Index <%= model_name.underscore.pluralize %>={[]} academy={mockAcademy} />)
      
      const createButton = screen.getByText('Create your first <%= model_name.humanize.downcase %>')
      expect(createButton).toBeInTheDocument()
      expect(createButton).toHaveAttribute('href', '/<%= model_name.underscore.pluralize %>/new')
    })

    it('does not show the grid when empty', () => {
      render(<Index <%= model_name.underscore.pluralize %>={[]} academy={mockAcademy} />)
      
      expect(screen.queryByRole('grid')).not.toBeInTheDocument()
    })
  })

  // Test responsive behavior and styling
  describe('responsive layout', () => {
    it('applies correct CSS classes for responsive grid', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const gridContainer = screen.getByRole('main').querySelector('.grid')
      expect(gridContainer).toHaveClass('grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3')
    })

    it('applies hover effects on cards', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const cards = screen.getByRole('main').querySelectorAll('.hover\\:shadow-md')
      expect(cards).toHaveLength(2)
    })
  })

  // Test interactions
  describe('user interactions', () => {
    it('handles card hover states', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const firstCard = screen.getByText('Test <%= model_name.humanize %> 1').closest('div')
      expect(firstCard).toHaveClass('hover:shadow-md', 'transition-shadow')
    })

    it('provides proper accessibility for action links', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const viewLinks = screen.getAllByText('View')
      const editLinks = screen.getAllByText('Edit')
      
      viewLinks.forEach(link => {
        expect(link).toHaveAttribute('href')
        expect(link).toHaveClass('text-blue-600', 'hover:text-blue-800')
      })
      
      editLinks.forEach(link => {
        expect(link).toHaveAttribute('href')
        expect(link).toHaveClass('text-gray-600', 'hover:text-gray-800')
      })
    })
  })

  // Test data handling edge cases
  describe('edge cases', () => {
    it('handles <%= model_name.humanize.pluralize.downcase %> without optional fields', () => {
      const minimal<%= model_name.camelize.pluralize %>: <%= model_name.camelize %>Type[] = [
        {
          id: '1',
          slug: 'minimal-<%= model_name.underscore %>',
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
          name: 'Minimal <%= model_name.humanize %>',
<% elsif attr[:type] == 'boolean' -%>
          <%= attr[:name] %>: false,
<% elsif attr[:type] == 'text' -%>
          <%= attr[:name] %>: '',
<% elsif attr[:type] == 'string' -%>
          <%= attr[:name] %>: 'minimal',
<% elsif attr[:type] == 'integer' -%>
          <%= attr[:name] %>: 0,
<% else -%>
          <%= attr[:name] %>: '',
<% end -%>
<% end -%>
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      ]

      render(<Index <%= model_name.underscore.pluralize %>={minimal<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('Minimal <%= model_name.humanize %>')).toBeInTheDocument()
    })

    it('handles long <%= model_name.humanize.downcase %> names gracefully', () => {
      const long<%= model_name.camelize.pluralize %>: <%= model_name.camelize %>Type[] = [
        {
          id: '1',
          slug: 'long-name-<%= model_name.underscore %>',
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
          name: 'This is a very long <%= model_name.humanize.downcase %> name that should be handled properly',
<% elsif attr[:type] == 'boolean' -%>
          <%= attr[:name] %>: true,
<% elsif attr[:type] == 'text' -%>
          <%= attr[:name] %>: 'This is a very long description that should be truncated properly in the UI with line clamp functionality to prevent layout issues',
<% elsif attr[:type] == 'string' -%>
          <%= attr[:name] %>: 'Long <%= attr[:name].humanize.downcase %> value',
<% elsif attr[:type] == 'integer' -%>
          <%= attr[:name] %>: 999999,
<% else -%>
          <%= attr[:name] %>: 'long_value_string',
<% end -%>
<% end -%>
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      ]

      render(<Index <%= model_name.underscore.pluralize %>={long<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText(/This is a very long <%= model_name.humanize.downcase %> name/)).toBeInTheDocument()
    })
  })

  // Test accessibility
  describe('accessibility', () => {
    it('has proper heading hierarchy', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const mainHeading = screen.getByRole('heading', { level: 1 })
      expect(mainHeading).toHaveTextContent('<%= model_name.humanize.pluralize %>')
    })

    it('provides meaningful link text', () => {
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      expect(screen.getByText('New <%= model_name.humanize %>')).toBeInTheDocument()
      expect(screen.getAllByText('View')).toHaveLength(2)
      expect(screen.getAllByText('Edit')).toHaveLength(2)
    })

    it('maintains proper color contrast for status indicators', () => {
<% if attributes.any? { |attr| attr[:name] == 'is_active' } -%>
      render(<Index <%= model_name.underscore.pluralize %>={mock<%= model_name.camelize.pluralize %>} academy={mockAcademy} />)
      
      const activeStatus = screen.getByText('Active')
      const inactiveStatus = screen.getByText('Inactive')
      
      expect(activeStatus).toHaveClass('bg-green-100', 'text-green-800')
      expect(inactiveStatus).toHaveClass('bg-red-100', 'text-red-800')
<% else -%>
      // No status indicators in this model
      expect(true).toBe(true)
<% end -%>
    })
  })
})