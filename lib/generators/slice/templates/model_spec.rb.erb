# frozen_string_literal: true

require "rails_helper"

# <%= full_model_name %> Model Specs
# 
# Tests for the <%= model_name.humanize %> model including validations, associations,
# scopes, and instance methods. Ensures model behaves correctly in all scenarios.
# 
<% if module_name -%>
module <%= module_name %>
  RSpec.describe <%= model_name.camelize %>, type: :model do
<% else -%>
RSpec.describe <%= model_name.camelize %>, type: :model do
<% end -%>
<% unless skip_academy? -%>
    # Test setup with required associations
    let(:academy) { create(:academy) }
    let(:<%= model_name.underscore %>) { create(:<%= model_name.underscore %>, academy: academy) }
<% else -%>
    # Test setup for foundation model
    let(:<%= model_name.underscore %>) { create(:<%= model_name.underscore %>) }
<% end -%>

    # Test model structure and basic functionality
    describe "model structure" do
      it "has a valid factory" do
        expect(<%= model_name.underscore %>).to be_valid
      end

      it "generates a slug on creation" do
        expect(<%= model_name.underscore %>.slug).to be_present
      end

      it "uses UUID as primary key" do
        expect(<%= model_name.underscore %>.id).to match(/\A[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\z/)
      end
    end

<% unless skip_academy? -%>
    # Test multi-tenancy associations
    describe "associations" do
      it "belongs to an academy" do
        expect(<%= model_name.underscore %>.academy).to eq(academy)
      end

      it "is scoped to academy via acts_as_tenant" do
        expect(<%= full_model_name %>).to respond_to(:by_tenant)
      end
    end

<% end -%>
    # Test model validations
    describe "validations" do
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
      describe "#name" do
        it "is required" do
          <%= model_name.underscore %>.name = nil
          expect(<%= model_name.underscore %>).not_to be_valid
          expect(<%= model_name.underscore %>.errors[:name]).to include("can't be blank")
        end

        it "has a maximum length of 255 characters" do
          <%= model_name.underscore %>.name = "a" * 256
          expect(<%= model_name.underscore %>).not_to be_valid
          expect(<%= model_name.underscore %>.errors[:name]).to include("is too long (maximum is 255 characters)")
        end
      end

<% elsif attr[:type] == 'boolean' -%>
      describe "#<%= attr[:name] %>" do
        it "accepts true value" do
          <%= model_name.underscore %>.<%= attr[:name] %> = true
          expect(<%= model_name.underscore %>).to be_valid
        end

        it "accepts false value" do
          <%= model_name.underscore %>.<%= attr[:name] %> = false
          expect(<%= model_name.underscore %>).to be_valid
        end

        it "does not accept nil" do
          <%= model_name.underscore %>.<%= attr[:name] %> = nil
          expect(<%= model_name.underscore %>).not_to be_valid
        end
      end

<% elsif attr[:type] == 'text' -%>
      describe "#<%= attr[:name] %>" do
        it "has a maximum length of 1000 characters" do
          <%= model_name.underscore %>.<%= attr[:name] %> = "a" * 1001
          expect(<%= model_name.underscore %>).not_to be_valid
          expect(<%= model_name.underscore %>.errors[:<%= attr[:name] %>]).to include("is too long (maximum is 1000 characters)")
        end

        it "allows empty value" do
          <%= model_name.underscore %>.<%= attr[:name] %> = ""
          expect(<%= model_name.underscore %>).to be_valid
        end
      end

<% elsif attr[:type] == 'string' -%>
      describe "#<%= attr[:name] %>" do
        it "is required" do
          <%= model_name.underscore %>.<%= attr[:name] %> = nil
          expect(<%= model_name.underscore %>).not_to be_valid
          expect(<%= model_name.underscore %>.errors[:<%= attr[:name] %>]).to include("can't be blank")
        end

        it "has a maximum length of 255 characters" do
          <%= model_name.underscore %>.<%= attr[:name] %> = "a" * 256
          expect(<%= model_name.underscore %>).not_to be_valid
          expect(<%= model_name.underscore %>.errors[:<%= attr[:name] %>]).to include("is too long (maximum is 255 characters)")
        end
      end

<% end -%>
<% end -%>
    end

    # Test model scopes
    describe "scopes" do
<% if attributes.any? { |attr| attr[:name] == 'is_active' } -%>
      describe ".active" do
        let!(:active_record) { create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>, is_active: true) }
        let!(:inactive_record) { create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>, is_active: false) }

        it "returns only active records" do
<% unless skip_academy? -%>
          ActsAsTenant.with_tenant(academy) do
            expect(<%= full_model_name %>.active).to include(active_record)
            expect(<%= full_model_name %>.active).not_to include(inactive_record)
          end
<% else -%>
          expect(<%= full_model_name %>.active).to include(active_record)
          expect(<%= full_model_name %>.active).not_to include(inactive_record)
<% end -%>
        end
      end

      describe ".inactive" do
        let!(:active_record) { create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>, is_active: true) }
        let!(:inactive_record) { create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>, is_active: false) }

        it "returns only inactive records" do
<% unless skip_academy? -%>
          ActsAsTenant.with_tenant(academy) do
            expect(<%= full_model_name %>.inactive).to include(inactive_record)
            expect(<%= full_model_name %>.inactive).not_to include(active_record)
          end
<% else -%>
          expect(<%= full_model_name %>.inactive).to include(inactive_record)
          expect(<%= full_model_name %>.inactive).not_to include(active_record)
<% end -%>
        end
      end
<% else -%>
      # Add scope tests here when scopes are added to the model
      it "can be extended with custom scopes" do
        expect(<%= full_model_name %>).to respond_to(:all)
      end
<% end -%>
    end

    # Test instance methods
    describe "instance methods" do
      describe "#display_name" do
        it "returns the name of the <%= model_name.humanize.downcase %>" do
          expect(<%= model_name.underscore %>.display_name).to eq(<%= model_name.underscore %>.name)
        end
      end

      describe "#to_param" do
        it "returns the slug for URL generation" do
          expect(<%= model_name.underscore %>.to_param).to eq(<%= model_name.underscore %>.slug)
        end
      end
    end

<% unless skip_academy? -%>
    # Test multi-tenancy behavior
    describe "multi-tenancy" do
      let(:other_academy) { create(:academy) }
      let!(:record_in_academy) { create(:<%= model_name.underscore %>, academy: academy) }
      let!(:record_in_other_academy) { create(:<%= model_name.underscore %>, academy: other_academy) }

      it "only shows records from current tenant" do
        ActsAsTenant.with_tenant(academy) do
          expect(<%= full_model_name %>.all).to include(record_in_academy)
          expect(<%= full_model_name %>.all).not_to include(record_in_other_academy)
        end
      end

      it "automatically assigns current tenant when creating" do
        ActsAsTenant.with_tenant(academy) do
          new_record = <%= full_model_name %>.create!(
<% attributes.each_with_index do |attr, index| -%>
<% if attr[:name] == 'name' -%>
            name: "Test <%= model_name.humanize %>"<%= index < attributes.length - 1 ? ',' : '' %>
<% elsif attr[:type] == 'boolean' -%>
            <%= attr[:name] %>: true<%= index < attributes.length - 1 ? ',' : '' %>
<% elsif attr[:type] == 'text' -%>
            <%= attr[:name] %>: "Test <%= attr[:name].humanize.downcase %>"<%= index < attributes.length - 1 ? ',' : '' %>
<% elsif attr[:type] == 'string' -%>
            <%= attr[:name] %>: "Test <%= attr[:name].humanize.downcase %>"<%= index < attributes.length - 1 ? ',' : '' %>
<% else -%>
            <%= attr[:name] %>: "test_value"<%= index < attributes.length - 1 ? ',' : '' %>
<% end -%>
<% end -%>
          )
          expect(new_record.academy).to eq(academy)
        end
      end
    end

<% end -%>
    # Test factory and create valid records
    describe "factory" do
      it "creates valid <%= model_name.humanize.downcase %> records" do
        expect { create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>) }.not_to raise_error
      end

      it "creates unique slugs for different records" do
        record1 = create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>)
        record2 = create(:<%= model_name.underscore %><% unless skip_academy? %>, academy: academy<% end %>)
        expect(record1.slug).not_to eq(record2.slug)
      end
    end
<% if module_name -%>
  end
end
<% else -%>
end
<% end -%>