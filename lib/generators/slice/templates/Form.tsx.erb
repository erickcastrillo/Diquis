/**
 * <%= model_name.camelize %> Form Component
 * 
 * Reusable form component for creating and editing <%= model_name.humanize.pluralize.downcase %>.
 * Handles form state, validation, and submission with proper error display.
 * 
 * Features:
 * - Automatic form field generation based on model attributes
 * - Client-side form state management with Inertia.js
 * - Real-time validation error display
 * - Proper handling of different field types (text, textarea, checkbox)
 * - Loading states and disabled submit button during processing
 */

import { useForm } from '@inertiajs/react'
import { FormEventHandler } from 'react'
import { <%= model_name.camelize %>Type } from './types'

interface Props {
  <%= model_name.underscore %>: <%= model_name.camelize %>Type
  academy: {
    slug: string
    name: string
  }
  isEditing?: boolean
}

export default function Form({ <%= model_name.underscore %>, academy, isEditing = false }: Props) {
  // Initialize form with existing data or default values
  const { data, setData, post, put, processing, errors, reset } = useForm({
<% attributes.each do |attr| -%>
    <%= attr[:name] %>: <%= model_name.underscore %>.<%= attr[:name] %> || <% if attr[:type] == 'boolean' %>false<% elsif attr[:type] == 'text' || attr[:type] == 'string' %>''<% else %>''<% end %>,
<% end -%>
  })

  // Handle form submission - POST for create, PUT for update
  const submit: FormEventHandler = (e) => {
    e.preventDefault()

    if (isEditing) {
      put(`/<%= model_name.underscore.pluralize %>/${<%= model_name.underscore %>.id}`)
    } else {
      post('/<%= model_name.underscore.pluralize %>')
    }
  }

  return (
    <form onSubmit={submit}>
      {/* Form Fields - Generated based on model attributes */}
<% attributes.each do |attr| -%>
      <div className="mb-3">
        <label htmlFor="<%= attr[:name] %>" className="form-label">
          <%= attr[:name].humanize %>
        </label>
<% if attr[:type] == 'text' -%>
        <textarea
          id="<%= attr[:name] %>"
          name="<%= attr[:name] %>"
          value={data.<%= attr[:name] %>}
          onChange={(e) => setData('<%= attr[:name] %>', e.target.value)}
          rows={4}
          className={`form-control ${errors.<%= attr[:name] %> ? 'is-invalid' : ''}`}
          placeholder="Enter <%= attr[:name].humanize.downcase %>"
        />
<% elsif attr[:type] == 'boolean' -%>
        <div className="form-check">
          <input
            id="<%= attr[:name] %>"
            name="<%= attr[:name] %>"
            type="checkbox"
            checked={data.<%= attr[:name] %>}
            onChange={(e) => setData('<%= attr[:name] %>', e.target.checked)}
            className="form-check-input"
          />
          <label htmlFor="<%= attr[:name] %>" className="form-check-label">
            <%= attr[:name].humanize %>
          </label>
        </div>
<% else -%>
        <input
          id="<%= attr[:name] %>"
          name="<%= attr[:name] %>"
          type="text"
          value={data.<%= attr[:name] %>}
          onChange={(e) => setData('<%= attr[:name] %>', e.target.value)}
          className={`form-control ${errors.<%= attr[:name] %> ? 'is-invalid' : ''}`}
          placeholder="Enter <%= attr[:name].humanize.downcase %>"
        />
<% end -%>
        {/* Validation Error Display */}
        {errors.<%= attr[:name] %> && (
          <div className="invalid-feedback">
            {errors.<%= attr[:name] %>}
          </div>
        )}
      </div>

<% end -%>
      {/* Form Actions */}
      <div className="d-flex justify-content-end gap-2">
        <button
          type="button"
          onClick={() => window.history.back()}
          className="btn btn-secondary"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={processing}
          className="btn btn-primary"
        >
          {processing ? 'Saving...' : (isEditing ? 'Update' : 'Create')} <%= model_name.humanize %>
        </button>
      </div>
    </form>
  )
}