# frozen_string_literal: true

# <%= full_model_name %> Model
# 
# This model represents <%= model_name.humanize.pluralize.downcase %> in the <%= slice_name.humanize.downcase %> domain.
<% unless skip_academy? -%>
# It's scoped to an Academy using acts_as_tenant for multi-tenancy.
<% end -%>
# 
# Generated attributes:
<% attributes.each do |attr| -%>
#   - <%= attr[:name] %> (<%= attr[:type] %>): <%= attr[:name].humanize %>
<% end -%>
#
<% if module_name -%>
module <%= module_name %>
  class <%= model_name.camelize %> < ApplicationRecord
<% else -%>
class <%= model_name.camelize %> < ApplicationRecord
<% end -%>
    # Include UUID primary key support for better security and performance
    include UuidPrimaryKey
<% unless skip_academy? -%>
    # Multi-tenancy: This model is scoped to an Academy
    acts_as_tenant(:academy)

    # Associations
    belongs_to :academy, inverse_of: :<%= model_name.underscore.pluralize %>
<% else -%>

    # Associations
    # Note: Academy associations are skipped for this foundation model
<% end -%>

    # Validations
    # Standard validations based on generated attributes
<% attributes.each do |attr| -%>
<% if attr[:name] == 'name' -%>
    validates :name, presence: true, length: { maximum: 255 }
<% elsif attr[:type] == 'boolean' -%>
    validates :<%= attr[:name] %>, inclusion: { in: [ true, false ] }
<% elsif attr[:type] == 'text' -%>
    validates :<%= attr[:name] %>, length: { maximum: 1000 }
<% elsif attr[:type] == 'string' -%>
    validates :<%= attr[:name] %>, presence: true, length: { maximum: 255 }
<% end -%>
<% end -%>

    # Scopes
    # Common scopes for filtering records
    scope :active, -> { where(is_active: true) }
    scope :inactive, -> { where(is_active: false) }

    # Instance Methods
    # Display name for UI purposes
    def display_name
      name
    end
<% if module_name -%>
  end
end
<% else -%>
end
<% end -%>
